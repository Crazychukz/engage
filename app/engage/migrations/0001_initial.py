# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-09-03 05:39
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Branch Name')),
                ('address', models.CharField(max_length=200, verbose_name='Address')),
            ],
        ),
        migrations.CreateModel(
            name='Hypo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, verbose_name='School Name')),
                ('category', models.CharField(choices=[('Hospital', 'Hospital'), ('Home', 'Home')], max_length=100, null=True, verbose_name='Category')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Address')),
                ('landmark', models.CharField(blank=True, max_length=200, null=True, verbose_name='Landmark')),
                ('state', models.CharField(blank=True, max_length=50, null=True, verbose_name='State')),
                ('lga', models.CharField(blank=True, max_length=100, null=True, verbose_name='LGA')),
                ('lat', models.FloatField(default=0.0, null=True, verbose_name='Latitude')),
                ('lng', models.FloatField(default=0.0, null=True, verbose_name='Longitude')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='Remark')),
                ('date_captured', models.DateField(blank=True, null=True, verbose_name='Date Captured')),
                ('image', models.ImageField(blank=True, default='hypo/images/noimage.jpg', upload_to='hypo/images/', verbose_name='Hypo Image')),
                ('phone_number', models.CharField(max_length=20, null=True, verbose_name='Phone Number')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name_plural': 'Hypo Sampling',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, verbose_name='School Name')),
                ('school_type', models.CharField(choices=[('Government', 'Government'), ('Private', 'Private')], max_length=100, null=True, verbose_name='School Type')),
                ('approved', models.BooleanField(default=False, verbose_name='Approved')),
                ('visited', models.BooleanField(default=False, verbose_name='Visited')),
                ('address', models.CharField(max_length=200, verbose_name='Address')),
                ('landmark', models.CharField(max_length=200, null=True, verbose_name='Landmark')),
                ('designation', models.CharField(max_length=200, null=True, verbose_name='Designation')),
                ('state', models.CharField(max_length=50, verbose_name='State')),
                ('lga', models.CharField(max_length=100, verbose_name='LGA')),
                ('lat', models.FloatField(default=0.0, null=True, verbose_name='Latitude')),
                ('lng', models.FloatField(default=0.0, null=True, verbose_name='Longitude')),
                ('final_lat', models.FloatField(default=0.0, null=True, verbose_name='Final Latitude')),
                ('final_lng', models.FloatField(default=0.0, null=True, verbose_name='Final Longitude')),
                ('contact_name', models.CharField(max_length=200, null=True, verbose_name='Contact Person')),
                ('contact_phone', models.CharField(max_length=20, null=True, verbose_name='Contact Phone Number')),
                ('school_phone', models.CharField(max_length=20, null=True, verbose_name='School Phone Number')),
                ('level', models.CharField(choices=[('Nursery', 'Nursery'), ('Primary', 'Primary'), ('Secondary', 'Secondary'), ('Nursery - Primary', 'Nursery - Primary'), ('Nursery - Secondary', 'Nursery - Secondary'), ('Primary - Secondary', 'Primary - Secondary')], max_length=100, verbose_name='Level')),
                ('nursery_population', models.IntegerField(default=0, verbose_name='Nursery Population')),
                ('population', models.IntegerField(default=0, verbose_name='Total Population')),
                ('school_image', models.ImageField(blank=True, default='schools/images/noimage.jpg', upload_to='schools/images/', verbose_name='School Image')),
                ('cooking_video', models.FileField(blank=True, null=True, upload_to='schools/videos/', verbose_name='Cooking Video')),
                ('feeding_video', models.FileField(blank=True, null=True, upload_to='schools/videos/', verbose_name='Feeding Video')),
                ('education_video', models.FileField(blank=True, null=True, upload_to='schools/videos/', verbose_name='Education Video')),
                ('other_video', models.FileField(blank=True, null=True, upload_to='schools/videos/', verbose_name='Education Video')),
                ('final_population', models.IntegerField(default=0, verbose_name='Final Population')),
                ('sampled_population', models.IntegerField(default=0, verbose_name='Sampled Population')),
                ('cartons', models.IntegerField(default=0, verbose_name='Cartons')),
                ('lunch_box', models.IntegerField(default=0, verbose_name='Lunch Box')),
                ('lunch_box_with_noddles', models.IntegerField(default=0, verbose_name='Lunch Box With Noddles')),
                ('promoters', models.IntegerField(default=0, verbose_name='Promoters')),
                ('date_captured', models.DateField(blank=True, null=True, verbose_name='Date Captured')),
                ('visit_date', models.DateField(blank=True, null=True, verbose_name='Visit Date')),
                ('visit_start_time', models.TimeField(blank=True, null=True, verbose_name='Visit Start Time')),
                ('visit_end_time', models.TimeField(blank=True, null=True, verbose_name='Visit End Time')),
                ('visit_start_date', models.DateField(blank=True, null=True, verbose_name='Visit Start Date')),
                ('visit_end_date', models.DateField(blank=True, null=True, verbose_name='Visit End Date')),
                ('status', models.CharField(blank=True, choices=[('Pending Approval', 'Pending Approval'), ('Approved', 'Approved'), ('Visit Scheduled', 'Visit Scheduled')], max_length=200, null=True, verbose_name='Status')),
                ('reschedule_reason', models.TextField(blank=True, null=True, verbose_name='Reason for Reschedule')),
                ('delete', models.BooleanField(default=False, verbose_name='Delete')),
                ('cooking_rating', models.IntegerField(blank=True, default=0, null=True, verbose_name='Cooking Rating')),
                ('feeding_rating', models.IntegerField(blank=True, default=0, null=True, verbose_name='Feeding Rating')),
                ('education_rating', models.IntegerField(blank=True, default=0, null=True, verbose_name='Cooking Rating')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name_plural': 'School Sampling',
            },
        ),
        migrations.CreateModel(
            name='UserModules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name_plural': 'User Modules',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_string', models.CharField(max_length=20, verbose_name='Password String')),
                ('phone_number', models.CharField(max_length=11, verbose_name='Phone Number')),
                ('role', models.CharField(blank=True, choices=[('Supervisor', 'Supervisor'), ('Marketing Executive', 'Marketing Executive'), ('Branch Admin', 'Branch Admin'), ('Super Admin', 'Super Admin'), ('Admin', 'Admin')], max_length=50, verbose_name='Role')),
                ('user_module', models.CharField(blank=True, choices=[('School Sampling', 'School Sampling'), ('Hypo Sampling', 'Hypo Sampling'), ('University Sampling', 'University Sampling'), ('Fan Clubs', 'Fan Clubs'), ('All', 'All')], max_length=200, null=True, verbose_name='User Module')),
                ('super_admin', models.BooleanField(default=False, verbose_name='Super Admin')),
                ('state', models.CharField(max_length=200, null=True, verbose_name='State')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engage.UserProfile', verbose_name='Supervisor')),
                ('supervisor_module', models.ManyToManyField(blank=True, null=True, to='engage.UserModules', verbose_name='Supervisor User Module')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddField(
            model_name='school',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='engage.UserProfile', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='hypo',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engage.UserProfile', verbose_name='User'),
        ),
    ]
